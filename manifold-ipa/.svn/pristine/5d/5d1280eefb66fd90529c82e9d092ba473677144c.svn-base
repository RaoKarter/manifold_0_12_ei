# This is the Makefile before we adopted autotools.
#



# Makefile - simulator suite make file
#
# Please see copyright/licensing notices at the end of this file

##################################################################
#
# Modify the following definitions to suit your build environment,
# NOTE: most platforms should not require any changes
#
##################################################################

##
## vanilla Unix, GCC build
##
## tested hosts:
##
## Redhat Enterprise 5/Linux 2.6.18/64-bit
## Redhat Enterprise 4/Linux 2.6.9/32-bit
##
CC = mpic++

##################################################################
# Uncomment only one of the following OFLAGS, or make your own

# For debug:
OFLAGS = -O0 -g -DMIN_SYSCALL_MODE -DUSE_SSE_MOVE -Wall -DDEBUG -msse4a -mfpmath=sse  -lm -ldl -lqsim -L../../../qsim/ -I../../.. -I../../cache -I../../../qsim -I../../energy_introspector -lEI -I../CaffProc -lCaffProc -I../../../examples -lmanifold

# Fully-optimized, but with profiling for gprof:
#OFLAGS = -O3 -g -pg -m32 -DMIN_SYSCALL_MODE -DUSE_SSE_MOVE -Wall -static -fexpensive-optimizations -mtune=core2 -march=core2 -msse4a -mfpmath=sse -funroll-loops
# Fully-optimized:
#OFLAGS = -O3 -m32 -DMIN_SYSCALL_MODE -DUSE_SSE_MOVE -Wall -static -fexpensive-optimizations -mtune=core2 -march=core2 -msse4a -mfpmath=sse -funroll-loops

##################################################################
# Uncomment to turn on pipeline event logging (currently not supported)
ZTRACE = -DZTRACE

##################################################################
LIBRARY_LD_PATH=.
MFLAGS = 
MLIBS  = #-lm -ldl -lqsim -L../../qsim/
ENDIAN = 
MAKE = make
AR = ar qcv
AROPT =
RANLIB = ranlib
RM = rm -f
RMDIR = rm -f
LN = ln -s
LNDIR = ln -s
DIFF = diff
OEXT = o
LEXT = a
EEXT =
CS = ;
X=/

# Compilation-specific feature flags
#
# -DDEBUG	- turns on debugging features
# -DGZIP_PATH	- specifies path to GZIP executable, only needed if SYSPROBE
#		  cannot locate binary
# -DSLOW_SHIFTS	- emulate all shift operations, only used for testing as
#		  sysprobe will auto-detect if host can use fast shifts
# -DLINUX_RHEL4 - we needed to use this for RHEL4, but not for RHEL5 (default)
#
FFLAGS = #-DLINUX_RHEL4

##################################################################
#
# complete flags
#
CFLAGS = $(MFLAGS) $(FFLAGS) $(OFLAGS) $(BINUTILS_INC) $(BINUTILS_LIB) $(ZTRACE) -DUSE_PIN_TRACES -g

#
# all the sources
#
SRCS = \
endian.c \
eval.c \
machine.c \
memory.c \
misc.c \
options.c \
range.c \
regs.c \
stats.c \
symbol.c \
symbol.c 

HDRS = \
elf.h \
endian.h \
eval.h \
host.h \
loader.h \
machine.h \
memory.h \
misc.h \
options.h \
range.h \
regs.h \
sim.h \
sim.h \
stats.h \
symbol.h \
version.h \
valcheck.h \
machine.def \
x86flow.def        

OBJS_NOMAIN =	\
endian.$(OEXT) \
eval.$(OEXT) \
machine.$(OEXT) \
memory.$(OEXT) \
misc.$(OEXT) \
options.$(OEXT) \
range.$(OEXT) \
regs.$(OEXT) \
stats.$(OEXT) \
symbol.$(OEXT)

OBJS =  $(OBJS_NOMAIN)

# Zesto specific files
ZSRCS = \
zesto-alloc.cpp \
zesto-bpred.cpp \
zesto-commit.cpp \
zesto-core.cpp \
trace-core.cc \
zesto-decode.cpp \
zesto-exec.cpp \
zesto-fetch.cpp \
zesto-memdep.cpp \
zesto-opts.c \
zesto-oracle.cpp 

ZHDRS = \
zesto-alloc.h \
zesto-bpred.h \
zesto-commit.h \
zesto-core.h \
zesto-decode.h \
zesto-exec.h \
zesto-fetch.h \
zesto-memdep.h \
zesto-opts.h \
zesto-oracle.h \
zesto-structs.h

ZOBJS = \
zesto-alloc.$(OEXT) \
zesto-bpred.$(OEXT) \
zesto-commit.$(OEXT) \
zesto-core.$(OEXT) \
trace-core.$(OEXT) \
zesto-decode.$(OEXT) \
zesto-exec.$(OEXT) \
zesto-fetch.$(OEXT) \
zesto-memdep.$(OEXT) \
zesto-opts.$(OEXT) \
zesto-oracle.$(OEXT) 

# QSim files
QHDRS = \
distorm.h \
qsim.h \
qsim-net.h 

EXOOBJS = #\
libexo/libexo.$(OEXT) libexo/exolex.$(OEXT)

#
# programs to build
#

include make.target

#
# all targets, NOTE: library ordering is important...
#
default: libZesto
clean_libzesto:	
	rm -rf libZesto.a

all: clean_libzesto libZesto

make.target:
	touch make.target

libZesto:  $(OBJS) $(ZOBJS) $(EXOOBJS)
	ar qcv libZesto.a $(OBJS) $(ZOBJS) $(EXOOBJS) $(MLIBS)
	ranlib libZesto.a

# The various *.list files are automatically generated from
# directory listings of the respective source directories.
zesto-fetch.$(OEXT): zesto-fetch.cpp zesto-fetch.h ZPIPE-fetch
	perl make_def_lists.pl fetch
	$(CC) $(CFLAGS) -c $*.cpp

zesto-decode.$(OEXT): zesto-decode.cpp zesto-decode.h ZPIPE-decode
	perl make_def_lists.pl decode
	$(CC) $(CFLAGS) -c $*.cpp

zesto-alloc.$(OEXT): zesto-alloc.cpp zesto-alloc.h ZPIPE-alloc
	perl make_def_lists.pl alloc
	$(CC) $(CFLAGS) -c $*.cpp

zesto-exec.$(OEXT): zesto-exec.cpp zesto-exec.h ZPIPE-exec 
	perl make_def_lists.pl exec
	$(CC) $(CFLAGS) -L../CaffProc -c $*.cpp

zesto-commit.$(OEXT): zesto-commit.cpp zesto-commit.h ZPIPE-commit
	perl make_def_lists.pl commit
	$(CC) $(CFLAGS) -c $*.cpp

zesto-bpred.$(OEXT): zesto-bpred.cpp zesto-bpred.h ZCOMPS-bpred ZCOMPS-fusion ZCOMPS-btb ZCOMPS-ras
	perl make_def_lists.pl bpred
	$(CC) $(CFLAGS) -c $*.cpp

zesto-memdep.$(OEXT): zesto-memdep.cpp zesto-memdep.h ZCOMPS-memdep
	perl make_def_lists.pl memdep
	$(CC) $(CFLAGS) -c $*.cpp

.c.$(OEXT):
	$(CC) $(CFLAGS) -c $*.c
.cc.$(OEXT):
	$(CC) $(CFLAGS) -c $*.cc
.cpp.$(OEXT):
	$(CC) $(CFLAGS) -c $*.cpp

filelist:
	@echo $(SRCS) $(HDRS) Makefile

clean:
	-$(RM) *.o *.a *.obj core *~ Makefile.bak sysprobe$(EEXT)
	cd libexo $(CS) $(MAKE) "RM=$(RM)" "CS=$(CS)" clean $(CS) cd ..

endian.o: endian.h thread.h machine.h host.h misc.h machine.def
endian.o: zesto-structs.h regs.h options.h memory.h stats.h eval.h
eval.o: host.h misc.h eval.h machine.h machine.def zesto-structs.h regs.h
eval.o: options.h
machine.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h
machine.o: options.h eval.h memory.h stats.h sim.h thread.h
machine.o: x86flow.def
memory.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h
memory.o: options.h stats.h eval.h memory.h
misc.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h options.h
options.o: host.h misc.h options.h
range.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h options.h
range.o: symbol.h memory.h stats.h eval.h thread.h range.h
regs.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h options.h
regs.o:  memory.h stats.h eval.h thread.h
stats.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h options.h
stats.o: eval.h stats.h
symbol.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h
symbol.o: options.h memory.h stats.h eval.h thread.h symbol.h elf.h
symbol.o: host.h misc.h  machine.h machine.def zesto-structs.h regs.h
symbol.o: options.h memory.h stats.h eval.h thread.h symbol.h elf.h
x86.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h options.h
x86.o: eval.h memory.h stats.h sim.h thread.h x86flow.def
zesto-core.o: host.h misc.h machine.h machine.def zesto-structs.h regs.h
zesto-core.o: options.h memory.h stats.h eval.h thread.h
zesto-core.o: sim.h zesto-opts.h zesto-core.h zesto-oracle.h zesto-fetch.h
zesto-core.o: zesto-decode.h zesto-bpred.h zesto-alloc.h zesto-exec.h
zesto-core.o: zesto-commit.h zesto-structs.h 
zesto-opts.o: thread.h machine.h host.h misc.h machine.def zesto-structs.h
zesto-opts.o: regs.h options.h memory.h stats.h eval.h  zesto-opts.h
zesto-opts.o: zesto-core.h zesto-oracle.h zesto-fetch.h zesto-decode.h
zesto-opts.o: zesto-alloc.h zesto-exec.h zesto-commit.h
zesto-oracle.o: misc.h thread.h machine.h host.h machine.def zesto-structs.h
zesto-oracle.o: regs.h options.h memory.h stats.h eval.h
zesto-oracle.o: zesto-core.h zesto-opts.h zesto-oracle.h zesto-fetch.h
zesto-oracle.o: zesto-bpred.h zesto-decode.h zesto-alloc.h zesto-exec.h
zesto-oracle.o: zesto-commit.h 
zesto-fetch.o: thread.h machine.h host.h misc.h machine.def zesto-structs.h
zesto-fetch.o: regs.h options.h memory.h stats.h eval.h zesto-core.h
zesto-fetch.o: zesto-opts.h zesto-oracle.h zesto-fetch.h zesto-alloc.h
zesto-fetch.o: zesto-decode.h zesto-bpred.h
zesto-fetch.o: zesto-exec.h zesto-commit.h  
zesto-decode.o: thread.h machine.h host.h misc.h machine.def zesto-structs.h
zesto-decode.o: regs.h options.h memory.h stats.h eval.h zesto-core.h
zesto-decode.o: zesto-opts.h zesto-oracle.h zesto-decode.h zesto-fetch.h
zesto-decode.o: zesto-bpred.h
zesto-alloc.o: thread.h machine.h host.h misc.h machine.def zesto-structs.h
zesto-alloc.o: regs.h options.h memory.h stats.h eval.h zesto-core.h
zesto-alloc.o: zesto-opts.h zesto-oracle.h zesto-decode.h zesto-alloc.h
zesto-alloc.o: zesto-exec.h zesto-commit.h
zesto-exec.o: thread.h machine.h host.h misc.h machine.def zesto-structs.h
zesto-exec.o: regs.h options.h memory.h stats.h eval.h zesto-core.h
zesto-exec.o: zesto-opts.h zesto-oracle.h zesto-alloc.h zesto-exec.h
zesto-exec.o: zesto-memdep.h
zesto-commit.o: sim.h options.h stats.h host.h machine.h misc.h machine.def
zesto-commit.o: zesto-structs.h regs.h eval.h memory.h thread.h zesto-core.h
zesto-commit.o: zesto-opts.h zesto-oracle.h zesto-fetch.h zesto-decode.h
zesto-commit.o: zesto-alloc.h zesto-exec.h zesto-commit.h
zesto-commit.o: zesto-bpred.h
zesto-bpred.o: sim.h options.h stats.h host.h machine.h misc.h machine.def
zesto-bpred.o: zesto-structs.h regs.h eval.h memory.h thread.h valcheck.h
zesto-bpred.o: zesto-core.h zesto-bpred.h
zesto-memdep.o: sim.h options.h stats.h host.h machine.h misc.h machine.def
zesto-memdep.o: zesto-structs.h regs.h eval.h memory.h thread.h valcheck.h
zesto-memdep.o: zesto-opts.h zesto-core.h zesto-memdep.h

# SimpleScalar(TM) Tool Suite
# Copyright (C) 1994-2002 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
# All Rights Reserved. 
# 
# THIS IS A LEGAL DOCUMENT, BY USING SIMPLESCALAR,
# YOU ARE AGREEING TO THESE TERMS AND CONDITIONS.
# 
# No portion of this work may be used by any commercial entity, or for any
# commercial purpose, without the prior, written permission of SimpleScalar,
# LLC (info@simplescalar.com). Nonprofit and noncommercial use is permitted
# as described below.
# 
# 1. SimpleScalar is provided AS IS, with no warranty of any kind, express
# or implied. The user of the program accepts full responsibility for the
# application of the program and the use of any results.
# 
# 2. Nonprofit and noncommercial use is encouraged. SimpleScalar may be
# downloaded, compiled, executed, copied, and modified solely for nonprofit,
# educational, noncommercial research, and noncommercial scholarship
# purposes provided that this notice in its entirety accompanies all copies.
# Copies of the modified software can be delivered to persons who use it
# solely for nonprofit, educational, noncommercial research, and
# noncommercial scholarship purposes provided that this notice in its
# entirety accompanies all copies.
# 
# 3. ALL COMMERCIAL USE, AND ALL USE BY FOR PROFIT ENTITIES, IS EXPRESSLY
# PROHIBITED WITHOUT A LICENSE FROM SIMPLESCALAR, LLC (info@simplescalar.com).
# 
# 4. No nonprofit user may place any restrictions on the use of this software,
# including as modified by the user, by any other authorized user.
# 
# 5. Noncommercial and nonprofit users may distribute copies of SimpleScalar
# in compiled or executable form as set forth in Section 2, provided that
# either: (A) it is accompanied by the corresponding machine-readable source
# code, or (B) it is accompanied by a written offer, with no time limit, to
# give anyone a machine-readable copy of the corresponding source code in
# return for reimbursement of the cost of distribution. This written offer
# must permit verbatim duplication by anyone, or (C) it is distributed by
# someone who received only the executable form, and is accompanied by a
# copy of the written offer of source code.
# 
# 6. SimpleScalar was developed by Todd M. Austin, Ph.D. The tool suite is
# currently maintained by SimpleScalar LLC (info@simplescalar.com). US Mail:
# 2395 Timbercrest Court, Ann Arbor, MI 48105.
# 
# Copyright (C) 2000-2002 by The Regents of The University of Michigan.
# Copyright (C) 1994-2002 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
#
#
# Copyright © 2009 by Gabriel H. Loh and the Georgia Tech Research Corporation
# Atlanta, GA  30332-0415
# All Rights Reserved.
# 
# THIS IS A LEGAL DOCUMENT BY DOWNLOADING ZESTO, YOU ARE AGREEING TO THESE
# TERMS AND CONDITIONS.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 
# NOTE: Portions of this release are directly derived from the SimpleScalar
# Toolset (property of SimpleScalar LLC), and as such, those portions are
# bound by the corresponding legal terms and conditions.  All source files
# derived directly or in part from the SimpleScalar Toolset bear the original
# user agreement.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# 3. Neither the name of the Georgia Tech Research Corporation nor the names of
# its contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
# 
# 4. Zesto is distributed freely for commercial and non-commercial use.  Note,
# however, that the portions derived from the SimpleScalar Toolset are bound
# by the terms and agreements set forth by SimpleScalar, LLC.  In particular:
# 
#   "Nonprofit and noncommercial use is encouraged. SimpleScalar may be
#   downloaded, compiled, executed, copied, and modified solely for nonprofit,
#   educational, noncommercial research, and noncommercial scholarship
#   purposes provided that this notice in its entirety accompanies all copies.
#   Copies of the modified software can be delivered to persons who use it
#   solely for nonprofit, educational, noncommercial research, and
#   noncommercial scholarship purposes provided that this notice in its
#   entirety accompanies all copies."
# 
# User is responsible for reading and adhering to the terms set forth by
# SimpleScalar, LLC where appropriate.
# 
# 5. No nonprofit user may place any restrictions on the use of this software,
# including as modified by the user, by any other authorized user.
# 
# 6. Noncommercial and nonprofit users may distribute copies of Zesto in
# compiled or executable form as set forth in Section 2, provided that either:
# (A) it is accompanied by the corresponding machine-readable source code, or
# (B) it is accompanied by a written offer, with no time limit, to give anyone
# a machine-readable copy of the corresponding source code in return for
# reimbursement of the cost of distribution. This written offer must permit
# verbatim duplication by anyone, or (C) it is distributed by someone who
# received only the executable form, and is accompanied by a copy of the
# written offer of source code.
# 
# 7. Zesto was developed by Gabriel H. Loh, Ph.D.  US Mail: 266 Ferst Drive,
# Georgia Institute of Technology, Atlanta, GA 30332-0765

#include "outorder.h"
#include "core.h"

using namespace std;
using namespace libconfig;
using namespace manifold;
using namespace manifold::spx;

outorder_t::outorder_t(spx_core_t *spx_core, libconfig::Config *parser)
{
  type = SPX_PIPELINE_OUTORDER;
  core = spx_core;

  // set config
  set_config(parser);
  
  // initialize core components
  instQ = new instQ_t((pipeline_t*)this,config.instQ_size,config.IL1.offset_mask+config.IL1.index_mask);
  ROB = new ROB_t((pipeline_t*)this,config.ROB_size);
  RS = new RS_t((pipeline_t*)this,config.RS_size,config.exec_width,config.FU_port);
  STQ = new STQ_t((pipeline_t*)this,config.STQ_size);
  LDQ = new LDQ_t((pipeline_t*)this,config.LDQ_size);
  RF = new RF_t((pipeline_t*)this);
  for(int i = 0; i < config.exec_width; i++)
    EX.push_back(new EX_t((pipeline_t*)this,i,config.FU_port,config.FU_delay,config.FU_issue_rate));
}

outorder_t::~outorder_t()
{
  delete instQ;
  delete ROB;
  delete RS;
  delete STQ;
  delete LDQ;
  delete RF;
  
  for(vector<EX_t*>::iterator it = EX.begin(); it != EX.end(); it++)
    delete *it;
  EX.clear();
}

void outorder_t::set_config(libconfig::Config *parser)
{
  try
  {
    config.fetch_width = parser->lookup("fetch_width");
    config.alloc_width = parser->lookup("allocate_width");
    config.exec_width = parser->lookup("execute_width");
    config.commit_width = parser->lookup("commit_width");
    
    config.instQ_size = parser->lookup("instQ_size");
    config.RS_size = parser->lookup("RS_size");
    config.LDQ_size = parser->lookup("LDQ_size");
    config.STQ_size = parser->lookup("STQ_size");
    config.ROB_size = parser->lookup("ROB_size");
    
    config.FU_delay[SPX_FU_INT] = parser->lookup("FU_INT.delay");
    config.FU_delay[SPX_FU_MUL] = parser->lookup("FU_MUL.delay");
    config.FU_delay[SPX_FU_FP] = parser->lookup("FU_FP.delay");
    config.FU_delay[SPX_FU_MOV] = parser->lookup("FU_MOV.delay");
    config.FU_delay[SPX_FU_BR] = parser->lookup("FU_BR.delay");
    config.FU_delay[SPX_FU_LD] = parser->lookup("FU_LD.delay");
    config.FU_delay[SPX_FU_ST] = parser->lookup("FU_ST.delay");
    
    config.FU_issue_rate[SPX_FU_INT] = parser->lookup("FU_INT.issue_rate");
    config.FU_issue_rate[SPX_FU_MUL] = parser->lookup("FU_MUL.issue_rate");
    config.FU_issue_rate[SPX_FU_FP] = parser->lookup("FU_FP.issue_rate");
    config.FU_issue_rate[SPX_FU_MOV] = parser->lookup("FU_MOV.issue_rate");
    config.FU_issue_rate[SPX_FU_BR] = parser->lookup("FU_BR.issue_rate");
    config.FU_issue_rate[SPX_FU_LD] = parser->lookup("FU_LD.issue_rate");
    config.FU_issue_rate[SPX_FU_ST] = parser->lookup("FU_ST.issue_rate");

    Setting *setting;
    setting = &parser->lookup("FU_INT.port");
    for(int i = 0; i < setting->getLength(); i++)
      config.FU_port[SPX_FU_INT].push_back((*setting)[i]);
    setting = &parser->lookup("FU_MUL.port");
    for(int i = 0; i < setting->getLength(); i++)
      config.FU_port[SPX_FU_MUL].push_back((*setting)[i]);
    setting = &parser->lookup("FU_FP.port");
    for(int i = 0; i < setting->getLength(); i++)
      config.FU_port[SPX_FU_FP].push_back((*setting)[i]);
    setting = &parser->lookup("FU_MOV.port");
    for(int i = 0; i < setting->getLength(); i++)
      config.FU_port[SPX_FU_MOV].push_back((*setting)[i]);
    setting = &parser->lookup("FU_BR.port");
    for(int i = 0; i < setting->getLength(); i++)
      config.FU_port[SPX_FU_BR].push_back((*setting)[i]);
    setting = &parser->lookup("FU_LD.port");
    for(int i = 0; i < setting->getLength(); i++)
      config.FU_port[SPX_FU_LD].push_back((*setting)[i]);
    setting = &parser->lookup("FU_ST.port");
    for(int i = 0; i < setting->getLength(); i++)
      config.FU_port[SPX_FU_ST].push_back((*setting)[i]);

    config.IL1.size = parser->lookup("IL1.size");
    config.IL1.line_width = parser->lookup("IL1.line_width");
    config.IL1.assoc = parser->lookup("IL1.assoc");
    
    config.IL1.size = parser->lookup("DL1.size");
    config.IL1.line_width = parser->lookup("DL1.line_width");
    config.IL1.assoc = parser->lookup("DL1.assoc");

    int bit_mask;

    bit_mask = 0x01;
    config.IL1.offset_mask = 0;
    while(bit_mask < config.IL1.line_width)
    {
      config.IL1.offset_mask++;
      bit_mask = bit_mask << 1;
    }
    bit_mask = 0x01;
    config.IL1.index_mask = 0;
    while(bit_mask < config.IL1.assoc)
    {
      config.IL1.index_mask++;
      bit_mask = bit_mask << 1;
    }
    bit_mask = 0x01;
    config.DL1.offset_mask = 0;
    while(bit_mask < config.DL1.line_width)
    {
      config.DL1.offset_mask++;
      bit_mask = bit_mask << 1;
    }
    bit_mask = 0x01;
    config.DL1.index_mask = 0;
    while(bit_mask < config.DL1.assoc)
    {
      config.DL1.index_mask++;
      bit_mask = bit_mask << 1;
    }
  }
  catch(SettingNotFoundException e)
  {
    fprintf(stdout,"%s not defined\n",e.getPath());
    exit(1);
  }
  catch(SettingTypeException e)
  {
    fprintf(stdout,"%s has incorrect type\n",e.getPath());
    exit(1);
  }
}

void outorder_t::commit()
{
  for(int committed = 0; committed < config.commit_width; committed++)
  {
    inst_t *inst = ROB->get_front();
    
    if(inst)
    {
      ROB->pop_front();
      RF->writeback(inst);
      stats.last_commit_cycle = core->clock_cycle;
      
      if(inst->memcode == SPX_MEM_ST) // store
        STQ->schedule(inst); // update this inst ready to cache
      else
        delete inst;
    }
    else // empty ROB or ROB head not completed
      break;
  }

  if(core->clock_cycle - stats.last_commit_cycle > 5000)
  {
    fprintf(stdout,"SPX_ERROR (core %d): possible pipeline deadlock at %lu\n",core->core_id,stats.last_commit_cycle);
    exit(1);
  }
}

void outorder_t::memory()
{
  // process memory queues -- send cache requests to L1 if any
  // note that execute() follows commit(),
  // so if any store inst as ROB head was handled by STQ->schedule();
  // the cache_request is sent out to cache in the same clock cycle
  STQ->handle_cache();
  LDQ->handle_cache();
}

void outorder_t::execute()
{
  // process execution units
  for(int port = 0; port < config.exec_width; port++)
  {
    // EX to ROB scheduling
    inst_t *inst = EX[port]->get_front();
    if(inst)
    {
      EX[port]->pop_front(inst->excode); // remove this inst from EX pipe
      if(inst->memcode == SPX_MEM_LD) // load
        LDQ->schedule(inst); // schedule this inst to cache
      else
      {
        if(inst->memcode == SPX_MEM_ST) // store
          STQ->store_forward(inst); // wake up loads that are blocked by this store due to memory disambiguation
        RS->update(inst); // wake up all dependent insts
        ROB->update(inst); // mark this inst completed
      }
    }
  }

  for(int port = 0; port < config.exec_width; port++)
  {
    // RS to EX scheduling
    inst_t *inst = RS->get_front(port);
    if(inst) // there is a ready instruction to start execution
    {
      if(EX[inst->port]->is_available(inst->excode))
      {
        RS->pop_front(port);
        EX[inst->port]->push_back(inst);
      }
    }
  }
}

void outorder_t::allocate()
{
  for(int alloced = 0; alloced < config.alloc_width; alloced++)
  {
    inst_t *inst = instQ->get_front();
    if(inst)
    {
      if(ROB->is_available())
      {
        if(RS->is_available())
        {
          if(inst->memcode == SPX_MEM_ST) // store
          {
            if(STQ->is_available())
              STQ->push_back(inst);
            else // STQ full
              break;
          }
          else if(inst->memcode == SPX_MEM_LD) // load
          {
            if(LDQ->is_available())
            {
              LDQ->push_back(inst);
              STQ->mem_disamb_check(inst);
            }
            else // LDQ full
              break;
          }
          
          RF->resolve_dependency(inst);
          RS->port_binding(inst);
          RS->push_back(inst);
        }
        else // RS full
          break;
        
        instQ->pop_front();
        ROB->push_back(inst);
      }
      else // ROB full
        break;
    }
    else // empty instQ
      break;
  }
}

void outorder_t::frontend()
{
  for(int fetched = 0; fetched < config.fetch_width; fetched++)
  {
    if(instQ->is_available())
    {
      stats.Mop_count++;
      stats.uop_count++;
      stats.interval.Mop_count++;
      stats.interval.uop_count++;
      
      next_inst = new inst_t(core,++Mop_count,++uop_count);

      if(config.qsim == SPX_QSIM_LIB)
        Qsim_osd->run(core->core_id,1);
      else // SPX_QSIM_CLIENT
        Qsim_client->run(core->core_id,1);
      
      if(!next_inst->inflight)
      {
        Qsim_post_cb(next_inst);
        fetch(next_inst);
      }

      if(next_inst->Mop_head->Mop_length > 4)
        handle_long_inst(next_inst);

      next_inst = NULL;
    }
    else // instQ full
      break;
  }
}

void outorder_t::fetch(inst_t *inst)
{
  instQ->push_back(inst);
}

void outorder_t::handle_cache_response(int temp, cache_request_t *cache_request)
{
  inst_t *inst = cache_request->inst;

  #ifdef SPX_DEBUG
  fprintf(stdout,"SPX_DEBUG (core %d) | %lu: cache_response uop %lu (Mop %lu)\n",inst->core->core_id,inst->core->clock_cycle,inst->uop_sequence,inst->Mop_sequence);
  #endif

  switch(cache_request->op_type)
  {
    case SPX_MEM_LD:
      LDQ->pop(inst);
      RS->update(inst);
      ROB->update(inst);
      break;
    case SPX_MEM_ST:
      STQ->pop(inst);
      delete inst;
      break;
    default:
      fprintf(stdout,"SPX_ERROR (core %d): strange cache response %d received\n",core->core_id,cache_request->op_type);
      exit(1);
  }

  delete cache_request;
}


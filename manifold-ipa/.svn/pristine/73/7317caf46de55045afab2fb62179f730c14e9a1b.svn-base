//! @file zesto_l1l2.cc
//! @brief This program builds a simple simulator of multicore systems. Its purpose is to
//! demonstrate how to build such a simulator using the Manifold framework.
//! The multicore system is illustrated as follows:
//!
//! @verbatim
//!      -----------       -----------     ----------------      ----------
//!     | processor |     | processor |   | mem controller |    | L2 cache |
//!      -----------       -----------     ----------------      ----------
//!           |                 |                 |                  |
//!        -------           -------              |                  |
//!       | cache |         | cache |             |                  |
//!        -------           -------              |                  |
//!           |                 |                 |                  |
//!           |                 |                 |                  |
//!  ---------------------------------------------------------------------------
//!     ------------      ------------       ------------      ------------ 
//!    | NetIntface |    | NetIntface |     | NetIntface |    | NetIntface |  
//!     ------------      ------------       ------------      ------------ 
//!  ---------------------------------------------------------------------------
//! @endverbatim
//!
//! In this program we use the torus network of Iris.
//!
//! The components used in this program are:
//! - qsimlib_core_t: a processor model of Zesto.
//!                  It is built with the QSim library and uses QSim to get instructions.
//! - CaffDRAM: a memory controller model.
//! - mcp-cache: a coherence cache model.
//! - Iris: a cycle level interconnection network model.
//!
//! NOTE:
//! Since the processor model is built with the Qsim library, and all processors should
//! share the same Qsim OS domain object, in this program all the processors must be
//! in the same LP. In fact, we only allow this program to be run with 1 LP.
//!
//! In this program the configuration for the components is provided by a configuration
//! file which is parsed with libconfig++. An example can be found in conf4x1.cfg.
//! 
//! To run this program, type:
//! @code
//! mpirun -np 1 zesto_l1l2 <conf_file>  <zesto_conf_file>  <state_file>  <benchmark_tar_file>
//! @endcode
//! <conf_file>: the name of the configuration file.
//! <zesto_conf_file>: the name of the Zesto configuration file.
//! <state_file>: the name of the QSim state file.
//! <benchmark_tar_file>: the name of the benchmark tar file.
//!
//!
//!
#include "../common/sysBuilder_l1l2.h"
#include "mcp_cache-iris/mcp-iris.h"
#include "kernel/clock.h"
#include "kernel/component.h"
#include "kernel/manifold.h"
#include "zesto/qsimlib-core.h"
#include "mcp-cache/MESI_L1_cache.h"
#include "mcp-cache/MESI_L2_cache.h"
#include "CaffDRAM/Controller.h"
#include "CaffDRAM/McMap.h"
#include "qsim.h"
#include "qsim-load.h"
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <libconfig.h++>
#include "mpi.h"


using namespace std;
using namespace manifold::kernel;
using namespace manifold::uarch;
using namespace manifold::zesto;
using namespace manifold::mcp_cache_namespace;
using namespace manifold::iris;
using namespace manifold::caffdram;
using namespace libconfig;




int main(int argc, char** argv)
{
    if(argc != 5) {
        cerr << "Usage: mpirun -np 1 " << argv[0] << " <config_file>  <zesto_config_file> <state_file>  <benchmark_tar_file>" << endl;
	exit(1);
    }

    Config config;
    try {
	config.readFile(argv[1]);
    }
    catch (FileIOException e) {
        cerr << "Cannot read configuration file " << argv[1] << endl;
	exit(1);
    }
    catch (ParseException e) {
        cerr << "Cannot parse configuration file " << argv[1] << endl;
	exit(1);
    }


    Manifold::Init(argc, argv);

    SysBuilder_l1l2 sysBuilder;

    sysBuilder.config_network_topology(config);


    int N_LPs = 1; //number of LPs
    MPI_Comm_size(MPI_COMM_WORLD, &N_LPs);
    cout << "Number of LPs = " << N_LPs << endl;
    if(N_LPs != 1) {
        cerr << "Number of LPs must be 1 !" << endl;
	exit(1);
    }


    sysBuilder.config_components(config);


    //==========================================================================
    // create all the components.
    //==========================================================================
    Clock myClock(sysBuilder.FREQ);

    // need storage for component IDs for connecting components

    Node_cid_l1l2 node_cids[sysBuilder.MAX_NODES];

    //Terminal address to network address mapping
    //Using Simple_terminal_to_net_mapping means node ids must be 0 to MAX_NODES-1.
    Simple_terminal_to_net_mapping* mapping = new Simple_terminal_to_net_mapping();
    MCPSimLen* simLen = new MCPSimLen(sysBuilder.l1_cache_parameters.block_size, sysBuilder.COH_MSG_TYPE, sysBuilder.MEM_MSG_TYPE, sysBuilder.CREDIT_MSG_TYPE);
    MCPVnet* vnet = new MCPVnet(sysBuilder.COH_MSG_TYPE, sysBuilder.MEM_MSG_TYPE, sysBuilder.CREDIT_MSG_TYPE);

    sysBuilder.create_network(myClock, mapping, simLen, vnet);



#define REDIRECT_COUT

#ifdef REDIRECT_COUT
    // create a file into which to write debug/stats info.
    int Mytid;
    MPI_Comm_rank(MPI_COMM_WORLD, &Mytid);
    char buf[10];
    sprintf(buf, "DBG_LOG%d", Mytid);
    ofstream DBG_LOG(buf);

    //redirect cout to file.
    std::streambuf* cout_sbuf = std::cout.rdbuf(); // save original sbuf
    std::cout.rdbuf(DBG_LOG.rdbuf()); // redirect cout
#endif


    std::cout << "Loading state...\n";
    Qsim::OSDomain* qsim_osd = new Qsim::OSDomain(argv[3]);
    std::cout << "Loading app " << argv[4] << " ...\n";
    Qsim::load_file(*qsim_osd, argv[4]);
    std::cout << "Finished loading app.\n";


    CaffDramMcMap* mc_map = new CaffDramMcMap(sysBuilder.mc_node_idx_vec, sysBuilder.dram_settings);
    PageBasedMap* l2_map = new PageBasedMap(sysBuilder.l2_node_idx_vec, 12);

    sysBuilder.config_cache_settings(l2_map, mc_map);


    LpId_t node_lp = 0;

    //Node ID is the same as its node index: between 0 and MAX_NODES-1
    int cpuid=0;
    for(int i=0; i<sysBuilder.MAX_NODES; i++) {
	if(sysBuilder.mc_node_idx_set.find(i) != sysBuilder.mc_node_idx_set.end()) { //MC node
	    node_cids[i].type = MC_NODE;
	    node_cids[i].mc_cid = Component :: Create<Controller>(node_lp, i, sysBuilder.dram_settings, sysBuilder.MC_DOWNSTREAM_CREDITS);
	    node_cids[i].lp = node_lp;
	}
	else if(sysBuilder.proc_node_idx_set.find(i) != sysBuilder.proc_node_idx_set.end()) { //proc node
	    node_cids[i].type = CORE_NODE;
	    node_cids[i].proc_cid = Component :: Create<qsimlib_core_t>(node_lp, i, argv[2], qsim_osd, cpuid++);
	    node_cids[i].cache_cid = Component :: Create<MESI_L1_cache>(node_lp, i, sysBuilder.l1_cache_parameters, sysBuilder.l1_settings);
	    node_cids[i].lp = node_lp;
	}
	else if(sysBuilder.l2_node_idx_set.find(i) != sysBuilder.l2_node_idx_set.end()) { //L2 node
	    node_cids[i].type = L2_NODE;
	    node_cids[i].cache_cid = Component :: Create<MESI_L2_cache>(node_lp, i, sysBuilder.l2_cache_parameters, sysBuilder.l2_settings);
	    node_cids[i].lp = node_lp;
	}

	else {
	    node_cids[i].type = EMPTY_NODE;
	}
    }


    qsimlib_core_t :: Start_qsim(qsim_osd);


    for(int i=0; i<sysBuilder.MAX_NODES; i++) {
    if(node_cids[i].type == CORE_NODE)
    cout << i << "  core node lp= " << node_cids[i].lp << endl;
    else if(node_cids[i].type == MC_NODE)
    cout << i << "  mc node lp= " << node_cids[i].lp << endl;
    else if(node_cids[i].type == L2_NODE)
    cout << i << "  l2 node lp= " << node_cids[i].lp << endl;
    else
    cout << i << "  empty node" << endl;
    }





    //==========================================================================
    //Now connect the components
    //==========================================================================

    sysBuilder.connect_components(node_cids);


    //==========================================================================
    // Register processors with the clock
    //==========================================================================

    sysBuilder.register_components_with_clock<qsimlib_core_t>(node_cids);



    Manifold::StopAt(sysBuilder.STOP);
    Manifold::Run();


    sysBuilder.print_stats(node_cids);


#ifdef REDIRECT_COUT
    std::cout.rdbuf(cout_sbuf);
#endif

    Manifold :: Finalize();

}

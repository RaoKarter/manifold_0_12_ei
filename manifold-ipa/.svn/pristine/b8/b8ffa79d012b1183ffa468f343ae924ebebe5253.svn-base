#ifndef __SPX_PIPELINE_H__
#define __SPX_PIPELINE_H__

#include <libconfig.h++>
#include "qsim.h"
#include "qsim-client.h"
#include "instruction.h"
#include "component.h"

namespace manifold {
namespace spx {

enum SPX_PIPELINE_TYPES
{
  SPX_PIPELINE_OUTORDER = 0,
  SPX_PIPELINE_INORDER,
  SPX_NUM_PIPELINE_TYPES
};
  
enum SPX_QSIM_CB_TYPES
{
  SPX_QSIM_INST_CB = 0,
  SPX_QSIM_SRC_REG_CB,
  SPX_QSIM_SRC_FLAG_CB,
  SPX_QSIM_MEM_CB,
  SPX_QSIM_LD_CB,
  SPX_QSIM_ST_CB,
  SPX_QSIM_DEST_REG_CB,
  SPX_QSIM_DEST_FLAG_CB,
  NUM_SPX_QSIM_CB_TYPES
};

enum SPX_QSIM_FRONTEND_TYPES
{
  SPX_QSIM_LIB = 0,
  SPX_QSIM_CLIENT,
  NUM_SPX_QSIM_FRONTEND_TYPES
};

class pipeline_config_t
{
public:
  pipeline_config_t() {}
  ~pipeline_config_t() {}

  int qsim;
  
  int fetch_width;
  int alloc_width;
  int exec_width;
  int commit_width;
  
  int instQ_size;
  int RS_size;
  int LDQ_size;
  int STQ_size;
  int ROB_size;

  int FU_delay[SPX_NUM_FU_TYPES]; // delays for each FU
  int FU_issue_rate[SPX_NUM_FU_TYPES]; // issue rate for each FU
  std::vector<int> FU_port[SPX_NUM_FU_TYPES]; // ports for each FU

  struct
  {
    uint32_t size;
    int line_width;
    int assoc;
    int offset_mask;
    int index_mask;
  }IL1, DL1;
};

class pipeline_stats_t
{
public:
  pipeline_stats_t()
  {
    uop_count = 0;
    Mop_count = 0;
    last_commit_cycle = 0;
    core_time = 0.0;
    total_time = 0.0;
    
    interval.uop_count = 0;
    interval.Mop_count = 0;
    interval.core_time = 0.0;
  }
  ~pipeline_stats_t() {}
  
  uint64_t uop_count;
  uint64_t Mop_count;
  uint64_t last_commit_cycle;
  double core_time;
  double total_time;
  
  struct {
    uint64_t uop_count;
    uint64_t Mop_count;
    double core_time;
    timeval start_time;
  }interval;
};

class pipeline_t
{
public:
  pipeline_t();
  virtual ~pipeline_t() { delete Qsim_client; }
  
  // pipeline functions
  virtual void commit() = 0;
  virtual void memory() = 0;
  virtual void execute() = 0;
  virtual void allocate() = 0;
  virtual void frontend() = 0;
  virtual void fetch(inst_t *inst) = 0;
  virtual void handle_cache_response(int temp, cache_request_t *cache_request) = 0;
  virtual void set_config(libconfig::Config *config) = 0;
  void handle_long_inst(inst_t *inst);

  // Qsim callback functions
  void Qsim_inst_cb(int core_id, uint64_t vaddr, uint64_t paddr, uint8_t len, const uint8_t *bytes, enum inst_type type);
  void Qsim_mem_cb(int core_id, uint64_t vaddr, uint64_t paddr, uint8_t size, int type);
  void Qsim_reg_cb(int core_id, int reg, uint8_t size, int type);
  void Qsim_post_cb(inst_t *inst); // modify inst information after Qsim callbacks are completed
  Qsim::OSDomain *Qsim_osd; // Qsim OS domain
  Qsim::Client *Qsim_client; // Qsim client

  pipeline_config_t config;
  pipeline_stats_t stats;
  
protected:
  int type;
  spx_core_t *core;
  inst_t *next_inst; // next_inst from Qsim_cb
  
  uint64_t Mop_count;
  uint64_t uop_count;
  int Qsim_cb_status;
};

} //namespace manifold
} //namespace spx
#endif

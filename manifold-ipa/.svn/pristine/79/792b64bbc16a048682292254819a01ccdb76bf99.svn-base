#include "proc_builder.h"
//#include "mcp_l1l2_builder.h"
#include "zesto/qsimclient-core.h"
#include "zesto/qsimlib-core.h"
#include "zesto/trace-core.h"
#include "simple-proc/qsim-proc.h"
#include "simple-proc/qsimlib-proc.h"
#include "simple-proc/trace-proc.h"
#include "spx/core.h"
#include "mcp-cache/MESI_LLP_cache.h"
#include "mcp-cache/MESI_L1_cache.h"

using namespace manifold::kernel;
using namespace manifold::zesto;
using namespace manifold::simple_proc;
using namespace manifold::spx;
using namespace manifold::mcp_cache_namespace;

//####################################################################
//####################################################################
void Zesto_builder :: create_qsimclient_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    assert(m_type == QSIMCLIENT);
    assert(m_proc_id_cid_map.size() == 0);

    manifold::zesto::QsimClient_Settings proc_settings(m_server, m_port);
    int cpuid = 0;
    for(map<int,int>::iterator it = id_lp.begin(); it != id_lp.end(); ++it) {
        int node_id = (*it).first;
        int lp = (*it).second;
        int cid = manifold::kernel::Component::Create<qsimclient_core_t>(lp, node_id, m_conf, cpuid, proc_settings);
	cpuid++;
        m_proc_id_cid_map[node_id] = cid;
	qsimclient_core_t* proc = manifold::kernel::Component :: GetComponent<qsimclient_core_t>(cid);
	if(proc) {
	    Clock :: Register(clk, (core_t*)proc, &qsimclient_core_t::tick, (void(core_t::*)(void))0);
	}
    }

}


void Zesto_builder :: create_qsimlib_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    assert(m_type == QSIMLIB);
    assert(m_proc_id_cid_map.size() == 0);
    assert(m_qsim_osd != 0);

    int cpuid = 0;
    for(map<int,int>::iterator it = id_lp.begin(); it != id_lp.end(); ++it) {
        int node_id = (*it).first;
        int lp = (*it).second;
	assert(lp == 0);
        int cid = manifold::kernel::Component::Create<qsimlib_core_t>(lp, node_id, m_conf, m_qsim_osd, cpuid);
	cpuid++;
        m_proc_id_cid_map[node_id] = cid;
	qsimlib_core_t* proc = manifold::kernel::Component :: GetComponent<qsimlib_core_t>(cid);
	assert(proc);
	Clock :: Register(clk, (core_t*)proc, &qsimlib_core_t::tick, (void(core_t::*)(void))0);
    }
    qsimlib_core_t :: Start_qsim(m_qsim_osd);
}



void Zesto_builder :: create_trace_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    assert(m_type == TRACE);
    assert(m_proc_id_cid_map.size() == 0);

    int cpuid = 0;
    for(map<int,int>::iterator it = id_lp.begin(); it != id_lp.end(); ++it) {
        char buf[100];
	sprintf(buf, "%s%d", m_trace, cpuid);
        int node_id = (*it).first;
        int lp = (*it).second;
        int cid = manifold::kernel::Component::Create<trace_core_t>(lp, node_id, m_conf, buf);
	cpuid++;
        m_proc_id_cid_map[node_id] = cid;
	trace_core_t* proc = manifold::kernel::Component :: GetComponent<trace_core_t>(cid);
	if(proc) {
	    Clock :: Register(clk, (core_t*)proc, &trace_core_t::tick, (void(core_t::*)(void))0);
	}
    }

}



void Zesto_builder :: connect_proc_cache(CacheBuilder* cache_builder)
{
    switch(cache_builder->get_type()) {
        case CacheBuilder::MCP_CACHE: {
	        MCP_lp_lls_builder* mcp_builder = dynamic_cast<MCP_lp_lls_builder*>(cache_builder);
		assert(mcp_builder);

		map<int, LP_LLS_unit*>& mcp_caches = mcp_builder->get_cache_map();

		for(map<int,int>::iterator it = m_proc_id_cid_map.begin(); it != m_proc_id_cid_map.end(); ++it) {
		    int node_id = (*it).first;
		    int proc_cid = (*it).second;
		    LP_LLS_unit* unit = mcp_caches[node_id];
		    assert(unit);
		    int cache_cid = unit->get_llp_cid();

		    //!!!!!!!!!!!!!!!!!!! todo: use proper clock!
		    Manifold :: Connect(proc_cid, core_t::PORT0, &core_t::cache_response_handler,
					cache_cid, MESI_LLP_cache::PORT_PROC,
					&MESI_LLP_cache::handle_processor_request<ZestoCacheReq>, Clock::Master(), Clock::Master(), 1, 1);

		}//for
	    }
	    break;
        case CacheBuilder::MCP_L1L2: {
	        MCP_l1l2_builder* mcp_builder = dynamic_cast<MCP_l1l2_builder*>(cache_builder);
		assert(mcp_builder);

		map<int, int>& l1_cids = mcp_builder->get_l1_cids();

		for(map<int,int>::iterator it = m_proc_id_cid_map.begin(); it != m_proc_id_cid_map.end(); ++it) {
		    int node_id = (*it).first;
		    int proc_cid = (*it).second;
		    int cache_cid = l1_cids[node_id];

		    //!!!!!!!!!!!!!!!!!!! todo: use proper clock!
		    Manifold :: Connect(proc_cid, core_t::PORT0, &core_t::cache_response_handler,
					cache_cid, MESI_L1_cache::PORT_PROC,
					&MESI_L1_cache::handle_processor_request<ZestoCacheReq>, Clock::Master(), Clock::Master(), 1, 1);

		}//for
	    }
	    break;
        default:
	    assert(0);
    }

}



void Zesto_builder :: print_config(std::ostream& out)
{
    out << "Proc type: Zesto ";
    switch(m_type) {
        case QSIMCLIENT:
	    out << "qsimclient\n";
	    break;
        case QSIMLIB:
	    out << "qsimlib\n";
	    break;
        case TRACE:
	    out << "trace\n";
	    break;
        default:
	    assert(0);
    }
}


void Zesto_builder :: print_stats(std::ostream& out)
{
    for(map<int,int>::iterator it = m_proc_id_cid_map.begin(); it != m_proc_id_cid_map.end(); ++it) {
        int cid = (*it).second;
	core_t* proc = Component :: GetComponent<core_t>(cid);
	if(proc) {
	    proc->print_stats();
	    proc->print_stats(out);
	}
    }
}




//####################################################################
//####################################################################
void Simple_builder :: create_qsimclient_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    assert(m_type == QSIMCLIENT);
    assert(m_proc_id_cid_map.size() == 0);

    manifold::simple_proc::QsimProc_Settings proc_settings(m_server, m_port, m_l1_line_sz);
    int cpuid = 0;
    for(map<int,int>::iterator it = id_lp.begin(); it != id_lp.end(); ++it) {
        int node_id = (*it).first;
        int lp = (*it).second;
        int cid = manifold::kernel::Component::Create<QsimProcessor>(lp, cpuid, node_id, proc_settings);
	cpuid++;
        m_proc_id_cid_map[node_id] = cid;
	QsimProcessor* proc = manifold::kernel::Component :: GetComponent<QsimProcessor>(cid);
	if(proc) {
	    Clock :: Register(clk, (SimpleProcessor*)proc, &QsimProcessor::tick, (void(SimpleProcessor::*)(void))0);
	}
    }
}



void Simple_builder :: create_qsimlib_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    assert(m_type == QSIMLIB);
    assert(m_proc_id_cid_map.size() == 0);

    manifold::simple_proc::SimpleProc_Settings proc_settings(m_l1_line_sz);
    int cpuid = 0;
    for(map<int,int>::iterator it = id_lp.begin(); it != id_lp.end(); ++it) {
        int node_id = (*it).first;
        int lp = (*it).second;
	assert(lp == 0);
        int cid = manifold::kernel::Component::Create<QsimLibProcessor>(lp, m_qsim_osd, cpuid, node_id, proc_settings);
	cpuid++;
        m_proc_id_cid_map[node_id] = cid;
	QsimLibProcessor* proc = manifold::kernel::Component :: GetComponent<QsimLibProcessor>(cid);
	if(proc) {
	    Clock :: Register(clk, (SimpleProcessor*)proc, &QsimLibProcessor::tick, (void(SimpleProcessor::*)(void))0);
	}
    }

    QsimLibProcessor :: Start_qsim(m_qsim_osd);

}



void Simple_builder :: create_trace_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    assert(m_type == TRACE);
    assert(m_proc_id_cid_map.size() == 0);

    manifold::simple_proc::SimpleProc_Settings proc_settings(m_l1_line_sz);
    int cpuid = 0;
    for(map<int,int>::iterator it = id_lp.begin(); it != id_lp.end(); ++it) {
        char buf[100];
	sprintf(buf, "%s%d", m_trace, cpuid);
        int node_id = (*it).first;
        int lp = (*it).second;
        int cid = manifold::kernel::Component::Create<TraceProcessor>(lp, cpuid, buf, proc_settings);
	cpuid++;
        m_proc_id_cid_map[node_id] = cid;
	TraceProcessor* proc = manifold::kernel::Component :: GetComponent<TraceProcessor>(cid);
	if(proc) {
	    Clock :: Register(clk, (SimpleProcessor*)proc, &TraceProcessor::tick, (void(SimpleProcessor::*)(void))0);
	}
    }
}



void Simple_builder :: connect_proc_cache(CacheBuilder* cache_builder)
{
    switch(cache_builder->get_type()) {
        case CacheBuilder::MCP_CACHE: {
	        MCP_lp_lls_builder* mcp_builder = dynamic_cast<MCP_lp_lls_builder*>(cache_builder);
		assert(mcp_builder);

		map<int, LP_LLS_unit*>& mcp_caches = mcp_builder->get_cache_map();

		for(map<int,int>::iterator it = m_proc_id_cid_map.begin(); it != m_proc_id_cid_map.end(); ++it) {
		    int node_id = (*it).first;
		    int proc_cid = (*it).second;
		    LP_LLS_unit* unit = mcp_caches[node_id];
		    assert(unit);
		    int cache_cid = unit->get_llp_cid();

		    //!!!!!!!!!!!!!!!!!!! todo: use proper clock!
		    Manifold :: Connect(proc_cid, SimpleProcessor::PORT_CACHE, &SimpleProcessor::handle_cache_response,
					cache_cid, MESI_LLP_cache::PORT_PROC,
					&MESI_LLP_cache::handle_processor_request<manifold::simple_proc::CacheReq>, Clock::Master(), Clock::Master(), 1, 1);

		}//for
	    }
	    break;
        default:
	    assert(0);
    }


}


void Simple_builder :: print_config(std::ostream& out)
{
    out << "Proc type: SimpleProc ";
    switch(m_type) {
	case QSIMCLIENT:
	    out << "qsimclient\n";
	    break;
	case QSIMLIB:
	    out << "qsimlib\n";
	    break;
	case TRACE:
	    out << "trace\n";
	    break;
	default:
	    assert(0);
    }
}


void Simple_builder :: print_stats(std::ostream& out)
{
    for(map<int,int>::iterator it = m_proc_id_cid_map.begin(); it != m_proc_id_cid_map.end(); ++it) {
        int cid = (*it).second;
	SimpleProcessor* proc = Component :: GetComponent<SimpleProcessor>(cid);
	if(proc) {
	    proc->print_stats(out);
	}
    }
}


//####################################################################
//####################################################################
void Spx_builder :: create_qsimclient_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    assert(m_type == QSIMCLIENT);
    assert(m_proc_id_cid_map.size() == 0);

    int cpuid = 0;
    for(map<int,int>::iterator it = id_lp.begin(); it != id_lp.end(); ++it) {
        int node_id = (*it).first;
        int lp = (*it).second;
        int cid = manifold::kernel::Component::Create<spx_core_t>(lp, node_id, (Qsim::OSDomain*)0, m_conf, cpuid);
	cpuid++;
        m_proc_id_cid_map[node_id] = cid;
	spx_core_t* proc = manifold::kernel::Component :: GetComponent<spx_core_t>(cid);
	if(proc) {
	    Clock :: Register(clk, proc, &spx_core_t::tick, (void(spx_core_t::*)(void))0);
	}
    }

}



void Spx_builder :: create_qsimlib_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    assert(m_type == QSIMLIB);
    assert(m_proc_id_cid_map.size() == 0);
    assert(m_qsim_osd != 0);

    int cpuid = 0;
    for(map<int,int>::iterator it = id_lp.begin(); it != id_lp.end(); ++it) {
        int node_id = (*it).first;
        int lp = (*it).second;
	assert(lp == 0);
        int cid = manifold::kernel::Component::Create<spx_core_t>(lp, node_id, m_qsim_osd, m_conf, cpuid);
	cpuid++;
        m_proc_id_cid_map[node_id] = cid;
	spx_core_t* proc = manifold::kernel::Component :: GetComponent<spx_core_t>(cid);
	assert(proc);
	Clock :: Register(clk, (spx_core_t*)proc, &spx_core_t::tick, (void(spx_core_t::*)(void))0);
    }
}



void Spx_builder :: create_trace_procs(std::map<int,int>& id_lp,  manifold::kernel::Clock& clk)
{
    cerr << "SPX does not support trace files!\n";
    exit(1);
}



void Spx_builder :: connect_proc_cache(CacheBuilder* cache_builder)
{
    switch(cache_builder->get_type()) {
        case CacheBuilder::MCP_CACHE: {
	        MCP_lp_lls_builder* mcp_builder = dynamic_cast<MCP_lp_lls_builder*>(cache_builder);
		assert(mcp_builder);

		map<int, LP_LLS_unit*>& mcp_caches = mcp_builder->get_cache_map();

		for(map<int,int>::iterator it = m_proc_id_cid_map.begin(); it != m_proc_id_cid_map.end(); ++it) {
		    int node_id = (*it).first;
		    int proc_cid = (*it).second;
		    LP_LLS_unit* unit = mcp_caches[node_id];
		    assert(unit);
		    int cache_cid = unit->get_llp_cid();

		    //!!!!!!!!!!!!!!!!!!! todo: use proper clock!
		    Manifold :: Connect(proc_cid, spx_core_t::OUT_TO_CACHE, &spx_core_t::handle_cache_response,
					cache_cid, MESI_LLP_cache::PORT_PROC,
					&MESI_LLP_cache::handle_processor_request<manifold::spx::cache_request_t>,
					Clock::Master(), Clock::Master(), 1, 1);

		}//for
	    }
	    break;
        default:
	    assert(0);
    }

}



void Spx_builder :: print_config(std::ostream& out)
{
    out << "Proc type: SPX ";
    switch(m_type) {
	case QSIMCLIENT:
	    out << "qsimclient\n";
	    break;
	case QSIMLIB:
	    out << "qsimlib\n";
	    break;
	default:
	    assert(0);
    }
}



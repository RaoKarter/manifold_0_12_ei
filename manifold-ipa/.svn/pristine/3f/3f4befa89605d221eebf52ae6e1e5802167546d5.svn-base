#ifndef SYSBUILDER_L1L2_H
#define SYSBUILDER_L1L2_H

#include <libconfig.h++>
#include "kernel/manifold.h"
#include "kernel/component.h"
#include "iris/interfaces/simulatedLen.h"
#include "iris/interfaces/vnetAssign.h"
#include "iris/interfaces/genericIrisInterface.h"
#include "iris/genericTopology/ring.h"
#include "iris/genericTopology/torus.h"
#include "uarch/networkPacket.h"
#include "uarch/DestMap.h"
#include "mcp-cache/cache_types.h"
#include "mcp-cache/MemoryControllerMap.h"
#include "mcp-cache/L1_cache.h"
#include "mcp-cache/L2_cache.h"
#include "mcp-cache/MESI_L1_cache.h"
#include "mcp-cache/MESI_L2_cache.h"
#include "CaffDRAM/Controller.h"
#include "zesto/zesto-core.h"


// use a data structure to hold the component IDs of either a core node or a MC node or an L2 node.
enum {EMPTY_NODE=0, CORE_NODE, MC_NODE, L2_NODE};

struct Node_cid_l1l2 {
    Node_cid_l1l2() : type(EMPTY_NODE), lp(-1) {}
    int type; //either a CORE_NODE or a MC_NODE or an L2 node
    manifold::kernel::CompId_t proc_cid;
    manifold::kernel::CompId_t cache_cid; //used for both L1 and L2
    manifold::kernel::CompId_t mc_cid;
    int lp;
};



class MCPSimLen;
class MCPVnet;

//Objec of this class holds system configuration parameters.
class SysBuilder_l1l2 {
public:
    void config_network_topology(libconfig::Config& config);
    void config_components(libconfig::Config& config);
    void create_network(manifold::kernel::Clock& clock, manifold::iris::Terminal_to_net_mapping* mapping,
                        MCPSimLen* simLen, MCPVnet* vn);
    void connect_components(const Node_cid_l1l2 cids[]);
    void config_cache_settings(manifold::uarch::DestMap* l2_map,
                               manifold::uarch::DestMap* mc_map);
    template<typename CORE>
    void register_components_with_clock(const Node_cid_l1l2 node_cids[]);
    //template<typename CORE>
    void print_stats(const Node_cid_l1l2 node_cids[]);


    //network topology
    enum { TOPO_RING=1, TOPO_TORUS}; //network topology

    int net_topology;

    int x_dimension;
    int y_dimension;
    int MAX_NODES;

    //kernel
    int FREQ; //clock frequency
    manifold::kernel::Ticks_t STOP; //simulation stop time

    //proc
    vector<int> proc_node_idx_vec;
    set<int> proc_node_idx_set; //set is used to ensure each index is unique

    //cache
    manifold::mcp_cache_namespace::cache_settings l1_cache_parameters;
    manifold::mcp_cache_namespace::cache_settings l2_cache_parameters;
    unsigned L1_MSHR_SIZE;
    unsigned L2_MSHR_SIZE;
    int L1_downstream_credits;
    int L2_downstream_credits;
    manifold::mcp_cache_namespace::L1_cache_settings l1_settings;
    manifold::mcp_cache_namespace::L2_cache_settings l2_settings;
    vector<int> l2_node_idx_vec;
    set<int> l2_node_idx_set;

    //network
    int COH_MSG_TYPE;
    int MEM_MSG_TYPE;
    int CREDIT_MSG_TYPE;

    manifold::iris::ring_init_params ring_params;
    manifold::iris::torus_init_params torus_params;

    manifold::iris::Ring<manifold::uarch::NetworkPacket>* myRing;
    manifold::iris::Torus<manifold::uarch::NetworkPacket>* myTorus;

    //mc
    int MC_DOWNSTREAM_CREDITS;
    manifold::caffdram::Dsettings dram_settings;  //use default values
    vector<int> mc_node_idx_vec;
    set<int> mc_node_idx_set; //set is used to ensure each index is unique
};


//====================================================================
//====================================================================
template<typename CORE>
void SysBuilder_l1l2 :: register_components_with_clock(const Node_cid_l1l2 node_cids[])
{
    for(int i=0; i<this->MAX_NODES; i++) {
        if(node_cids[i].type == CORE_NODE) {
	    CORE* proc = manifold::kernel::Component :: GetComponent<CORE>(node_cids[i].proc_cid);
	    if(proc) {
		manifold::kernel::Clock :: Register((core_t*)proc, &CORE::tick, (void(core_t::*)(void))0);
		manifold::mcp_cache_namespace::L1_cache* l1 = manifold::kernel::Component :: GetComponent<manifold::mcp_cache_namespace::L1_cache>(node_cids[i].cache_cid);
		manifold::kernel::Clock :: Register(l1, &manifold::mcp_cache_namespace::L1_cache::tick, (void(manifold::mcp_cache_namespace::L1_cache::*)(void))0);

	    }
	}
    }

    for(int i=0; i<this->MAX_NODES; i++) {
        if(node_cids[i].type == CORE_NODE) {
	}
	else if(node_cids[i].type == MC_NODE) {
	    manifold::caffdram::Controller* mc = manifold::kernel::Component :: GetComponent<manifold::caffdram::Controller>(node_cids[i].mc_cid);
	    if(mc)
		mc->print_config(cout);
	}
    }
}




#endif // #ifndef SYSBUILDER_L1L2_H
